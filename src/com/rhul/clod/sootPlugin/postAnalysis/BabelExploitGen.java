/* Copyright (c) Royal Holloway, University of London | Contact Claudio Rizzo (claudio.rizzo.90@gmail.com), Johannes Kinder (johannes.kinder@rhul.ac.uk) or Lorenzo Cavallaro (Lorenzo.Cavallaro@rhul.ac.uk) for details or support | LICENSE.md for license details */
package com.rhul.clod.sootPlugin.postAnalysis;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import com.rhul.clod.BabelConfig;
import com.rhul.clod.sootPlugin.javascriptinterface.JavaScriptInterface;

public class BabelExploitGen {

	
	private List<JavaScriptInterface> jsIfaceList;
	
	private BabelConfig conf = BabelConfig.getConfigs();
	
	public BabelExploitGen(List<JavaScriptInterface> jsIfaceList) {
		this.jsIfaceList = jsIfaceList;
	}
	
	public String getExploitAsString() {
		String exploit = "";
		for(JavaScriptInterface jsIface : jsIfaceList) {
			for(String name : jsIface.getNames()) {
				exploit += addIfElse(name);
			}
		}
		
		if("".equals(exploit)) {
			exploit += "console.log('[BabelView] Javascript Executed');";
		}
		
		return exploit;
	}
	
	public void toFile() {
		try( BufferedWriter bw = new BufferedWriter(new FileWriter(conf.getInterfaceFolder()+"/"+conf.getApkName()+"_exploit.js"))) {
			bw.write(getExploitAsString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private String addIfElse(String name) {
		StringBuilder sb = new StringBuilder();
		String logPositive = "console.log('[BabelView] interface ["+name.toUpperCase()+"] found in WebView')";
		String logNegative = "console.log('[BabelView] interface ["+name+"] NOT found')";
		
		sb.append("if(typeof(");
		sb.append(name);
		sb.append(") === 'object') {\n");
		sb.append("\t"+logPositive+";\n");
		sb.append("} else {\n");
		sb.append("\t"+logNegative+";\n}\n");
		
		return sb.toString();
		
		
	}
}
