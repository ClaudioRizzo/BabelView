% [FILE_INTERACTION]

<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_

<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_

<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_

<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_


<java.io.File: void <init>(java.lang.String)> -> _SINK_
<java.io.File: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.File: void <init>(java.io.File,java.lang.String)> -> _SINK_
<java.io.File: void <init>(java.net.URI)> -> _SINK_


<java.io.BufferedReader: java.lang.String readLine()> -> _SOURCE_


% [SHARED_PREFERENCES]
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_

<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> -> _SOURCE_
<android.content.SharedPreferences: java.lang.String getString(java.lang.String, java.lang.String)> -> _SOURCE_
<android.content.SharedPreferences: int getInt(java.lang.String, int)> -> _SOURCE_
<android.content.SharedPreferences: float getFloat(java.lang.String, float)> -> _SOURCE_
<android.content.SharedPreferences: long getLong(java.lang.String, long)> -> _SOURCE_
<android.content.SharedPreferences: boolean getBoolean(java.lang.String, boolean)> -> _SOURCE_

% [INTENT]
% <android.net.Uri: android.net.Uri parse(java.lang.String)> -> _SINK_
% <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
% <android.content.Intent: android.content.Intent setData(android.net.Uri)> -> _SINK_
% <android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> -> _SINK_

% <android.content.Intent: void <init>(java.lang.String)> -> _SINK_
% <android.content.Intent: void <init>(java.lang.String,android.net.Uri)> -> _SINK_
% <android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> -> _SINK_

<android.content.Context: void startActivity(android.content.Intent)> -> _SINK_
<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)> -> _SINK_
<android.content.Context: void startActivity(android.content.Intent)> -> _SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)> -> _SINK_
<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.content.Context: void startActivities(android.content.Intent[])> -> _SINK_
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.content.IntentFilter: void addAction(java.lang.String)> -> _SINK_

%<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _SINK_

<android.app.Activity: android.content.Intent getIntent()> -> _SOURCE_


% [BUNDLES]
<android.os.Bundle: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.os.Bundle: boolean getBoolean(java.lang.String)> -> _SOURCE_
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SOURCE_
<android.os.Bundle: byte getByte(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SOURCE_
<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String,char)> -> _SOURCE_
<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.os.Bundle: double getDouble(java.lang.String)> -> _SOURCE_
<android.os.Bundle: double getDouble(java.lang.String,double)> -> _SOURCE_
<android.os.Bundle: double[] getDoubleArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: float getFloat(java.lang.String)> -> _SOURCE_
<android.os.Bundle: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: int getInt(java.lang.String,int)> -> _SOURCE_
<android.os.Bundle: int getInt(java.lang.String)> -> _SOURCE_
<android.os.Bundle: int[] getIntArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: long getLong(java.lang.String)> -> _SOURCE_
<android.os.Bundle: long getLong(java.lang.String,long)> -> _SOURCE_
<android.os.Bundle: long[] getLongArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String,short)> -> _SOURCE_
<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String key)> -> _SOURCE_

%<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
%<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
%<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
%<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
%<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
%<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
%<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
%<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
%<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
%<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_
%<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
%<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
%<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_
%<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
%<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
%<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
%<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
%<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
%<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
%<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_
%<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
%<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
%<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
%<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
%<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
%<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
%<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_
%<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
%<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
%<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
%<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_


% [SQL-lite]
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: String findEditTable(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> -> _SINK_

<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SINK_

<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_

<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> -> _SINK_

<android.database.sqlite.SQLiteDatabase: String findEditTable(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: String getPath()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SOURCE_


% [GENERAL]
<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_

<android.telephony.TelephonyManager: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE -> _SOURCE_ 

<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_

<android.database.Cursor: java.lang.String getString(int)> -> _SOURCE_

<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SOURCE_
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SOURCE_

<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_

<android.media.MediaRecorder: void setVideoSource(int)> -> _SINK_
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> -> _SINK_
<android.media.MediaRecorder: void start()> -> _SINK_


<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ 
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_ 
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_

% FRAME CONFUSION
<android.webkit.WebView: void loadUrl(java.lang.String)> -> _SINK_ 
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebView: void postUrl(java.lang.String,byte[])> -> _SINK_

% RFLECTION
<java.lang.Class: java.lang.Class forName(java.lang.String)> -> _SINK_
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> -> _SINK_
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> -> _SINK_
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> -> _SINK_

<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> -> _SINK_
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> -> _SINK_

% TESTS
<com.babelfilter.clod.babelfileter.JavaScriptInterface: java.lang.String getInformation()> -> _SOURCE_
<clod.rhul.com.babelpolymorphism.JsInterface: java.lang.String source()> -> _SOURCE_
<clod.rhul.com.babelpolymorphism.JsInterface: void sink(java.lang.Object)> -> _SINK_

<clod.rhul.com.babelpolymorphism.AMethod: void inokeme(java.lang.String)> -> _SINK_

% [BABELVIEW]
<BabelView: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView0: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView1: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView2: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView3: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView4: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView5: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView6: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView7: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView8: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView9: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView10: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView11: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView12: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView13: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView14: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView15: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView16: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_
<BabelView17: java.lang.Object inputSource(java.lang.String)> -> _SOURCE_

<BabelView: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView0: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView1: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView2: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView3: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView4: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView5: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView6: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView7: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView8: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView9: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView10: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView11: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView12: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView13: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView14: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView15: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView16: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_
<BabelView17: void babelLeak(java.lang.String,java.lang.String)> -> _SINK_